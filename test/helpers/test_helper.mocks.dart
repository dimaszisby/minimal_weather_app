// Mocks generated by Mockito 5.3.0 from annotations
// in minimal_weather_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i12;
import 'dart:typed_data' as _i13;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i5;
import 'package:minimal_weather_app/data/datasources/remote_data_source.dart'
    as _i11;
import 'package:minimal_weather_app/data/failure.dart' as _i8;
import 'package:minimal_weather_app/data/models/current_weather_model.dart'
    as _i3;
import 'package:minimal_weather_app/data/models/forecast_weather_model.dart'
    as _i4;
import 'package:minimal_weather_app/domain/entities/current_weather.dart'
    as _i9;
import 'package:minimal_weather_app/domain/entities/forecast_weather.dart'
    as _i10;
import 'package:minimal_weather_app/domain/repositories/weather_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCurrentWeatherModel_1 extends _i1.SmartFake
    implements _i3.CurrentWeatherModel {
  _FakeCurrentWeatherModel_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeForecastWeatherModel_2 extends _i1.SmartFake
    implements _i4.ForecastWeatherModel {
  _FakeForecastWeatherModel_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i6.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.CurrentWeatherEntity>> getCurrentWeather(
          double? lon, double? lat) =>
      (super.noSuchMethod(Invocation.method(#getCurrentWeather, [lon, lat]),
              returnValue:
                  _i7.Future<_i2.Either<_i8.Failure, _i9.CurrentWeatherEntity>>.value(
                      _FakeEither_0<_i8.Failure, _i9.CurrentWeatherEntity>(this,
                          Invocation.method(#getCurrentWeather, [lon, lat]))))
          as _i7.Future<_i2.Either<_i8.Failure, _i9.CurrentWeatherEntity>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i10.ForecastWeatherEntity>> getForecastWeather(
          double? lon, double? lat) =>
      (super.noSuchMethod(Invocation.method(#getForecastWeather, [lon, lat]),
              returnValue:
                  _i7.Future<_i2.Either<_i8.Failure, _i10.ForecastWeatherEntity>>.value(
                      _FakeEither_0<_i8.Failure, _i10.ForecastWeatherEntity>(this,
                          Invocation.method(#getForecastWeather, [lon, lat]))))
          as _i7.Future<_i2.Either<_i8.Failure, _i10.ForecastWeatherEntity>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i11.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.CurrentWeatherModel> getCurrentWeather(
          double? lon, double? lat) =>
      (super.noSuchMethod(Invocation.method(#getCurrentWeather, [lon, lat]),
              returnValue: _i7.Future<_i3.CurrentWeatherModel>.value(
                  _FakeCurrentWeatherModel_1(
                      this, Invocation.method(#getCurrentWeather, [lon, lat]))))
          as _i7.Future<_i3.CurrentWeatherModel>);
  @override
  _i7.Future<_i4.ForecastWeatherModel> getForecastWeather(
          double? lon, double? lat) =>
      (super.noSuchMethod(Invocation.method(#getForecastWeather, [lon, lat]),
              returnValue: _i7.Future<_i4.ForecastWeatherModel>.value(
                  _FakeForecastWeatherModel_2(this,
                      Invocation.method(#getForecastWeather, [lon, lat]))))
          as _i7.Future<_i4.ForecastWeatherModel>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
                  this, Invocation.method(#head, [url], {#headers: headers}))))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
                  this, Invocation.method(#get, [url], {#headers: headers}))))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i12.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#post, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
                  this,
                  Invocation.method(#post, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i12.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#put, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
                  this,
                  Invocation.method(#put, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i12.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#patch, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
                  this,
                  Invocation.method(#patch, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i12.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#delete, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
                  this,
                  Invocation.method(#delete, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: _i7.Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i13.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: _i7.Future<_i13.Uint8List>.value(_i13.Uint8List(0)))
          as _i7.Future<_i13.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: _i7.Future<_i5.StreamedResponse>.value(
                  _FakeStreamedResponse_4(
                      this, Invocation.method(#send, [request]))))
          as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
